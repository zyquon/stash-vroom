# Generated by ariadne-codegen
# Source: stash_vroom/queries.graphql

from typing import Any, Dict, List, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .configuration import Configuration
from .images_by_ids import ImagesByIds
from .images_by_search import ImagesBySearch
from .images_by_tag_ids import ImagesByTagIds
from .tags_by_regex import TagsByRegex
from .version import Version


def gql(q: str) -> str:
    return q


class Stash(BaseClient):
    def version(self, **kwargs: Any) -> Version:
        query = gql(
            """
            query Version {
              version {
                hash
                version
                build_time
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="Version", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Version.model_validate(data)

    def configuration(self, **kwargs: Any) -> Configuration:
        query = gql(
            """
            query Configuration {
              configuration {
                general {
                  ffmpegPath
                  ffprobePath
                  stashBoxes {
                    name
                    endpoint
                    api_key
                  }
                }
                plugins
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="Configuration", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Configuration.model_validate(data)

    def images_by_ids(
        self, ids: Union[Optional[List[str]], UnsetType] = UNSET, **kwargs: Any
    ) -> ImagesByIds:
        query = gql(
            """
            query ImagesByIds($ids: [ID!]) {
              findImages(ids: $ids, filter: {per_page: -1}) {
                images {
                  ...Img
                }
              }
            }

            fragment Img on Image {
              id
              urls
              title
              paths {
                image
                thumbnail
                preview
              }
              tags {
                id
                name
              }
              visual_files {
                __typename
                ... on ImageFile {
                  id
                  path
                  size
                  width
                  height
                  fingerprints {
                    type
                    value
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = self.execute(
            query=query, operation_name="ImagesByIds", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ImagesByIds.model_validate(data)

    def images_by_search(self, q: str, **kwargs: Any) -> ImagesBySearch:
        query = gql(
            """
            query ImagesBySearch($q: String!) {
              findImages(ids: [], filter: {q: $q, per_page: -1}) {
                images {
                  ...Img
                }
              }
            }

            fragment Img on Image {
              id
              urls
              title
              paths {
                image
                thumbnail
                preview
              }
              tags {
                id
                name
              }
              visual_files {
                __typename
                ... on ImageFile {
                  id
                  path
                  size
                  width
                  height
                  fingerprints {
                    type
                    value
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"q": q}
        response = self.execute(
            query=query, operation_name="ImagesBySearch", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ImagesBySearch.model_validate(data)

    def images_by_tag_ids(
        self, ids: Union[Optional[List[str]], UnsetType] = UNSET, **kwargs: Any
    ) -> ImagesByTagIds:
        query = gql(
            """
            query ImagesByTagIds($ids: [ID!]) {
              findImages(image_filter: {tags: {modifier: INCLUDES, value: $ids}}) {
                images {
                  ...Img
                }
              }
            }

            fragment Img on Image {
              id
              urls
              title
              paths {
                image
                thumbnail
                preview
              }
              tags {
                id
                name
              }
              visual_files {
                __typename
                ... on ImageFile {
                  id
                  path
                  size
                  width
                  height
                  fingerprints {
                    type
                    value
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = self.execute(
            query=query, operation_name="ImagesByTagIds", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ImagesByTagIds.model_validate(data)

    def tags_by_regex(self, regex: str, **kwargs: Any) -> TagsByRegex:
        query = gql(
            """
            query TagsByRegex($regex: String!) {
              findTags(
                tag_filter: {name: {value: $regex, modifier: MATCHES_REGEX}}
                filter: {per_page: -1}
              ) {
                tags {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"regex": regex}
        response = self.execute(
            query=query, operation_name="TagsByRegex", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TagsByRegex.model_validate(data)
